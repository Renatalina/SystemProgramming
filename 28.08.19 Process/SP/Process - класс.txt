Process - класс
 
Предоставляет доступ к локальным и удаленным процессам и позволяет запускать и останавливать локальные системные процессы.

Пространство имен:   System.Diagnostics

Иерархия наследования
System.Object
System.MarshalByRefObject
System.ComponentModel.Component
System.Diagnostics.Process

Синтаксис
[PermissionSetAttribute(SecurityAction.LinkDemand, Name = "FullTrust")]
[HostProtectionAttribute(SecurityAction.LinkDemand, SharedState = true, 
	Synchronization = true, ExternalProcessMgmt = true, SelfAffectingProcessMgmt = true)]
[PermissionSetAttribute(SecurityAction.InheritanceDemand, Name = "FullTrust")]
public class Process : Component

Конструкторы
 Process()	Инициализирует новый экземпляр класса Process.

Свойства
 BasePriority	Получает базовый приоритет связанного процесса.
 CanRaiseEvents	Возвращает значение, показывающее, может ли компонент вызывать событие.(Наследуется от Component.)
 Container	Возвращает контейнер IContainer, содержащий компонент Component.(Наследуется от Component.)
 DesignMode	Возвращает значение, указывающее, находится ли данный компонент Component в режиме конструктора в настоящее время.(Наследуется от Component.)
 EnableRaisingEvents	Получает или задает значение, указывающее, следует ли вызывать событие Exited при прекращении процесса.
 Events	Возвращает список обработчиков событий, которые прикреплены к этому объекту Component.(Наследуется от Component.)
 ExitCode	Получает значение, заданное связанным процессом при завершении.
 ExitTime	Получает время завершения связанного процесса.
 Handle	Получает собственный дескриптор связанного процесса.
 HandleCount	Получает число дескрипторов, открытых процессом.
 HasExited	Получает значение, определяющее завершение связанного процесса.
 Id	Получает уникальный идентификатор связанного процесса.
 MachineName	Получает имя компьютера, на котором выполняется связанный процесс.
 MainModule	Получает главный модуль связанного процесса.
 MainWindowHandle	Получает дескриптор главного окна связанного процесса.
 MainWindowTitle	Получает заголовок главного окна процесса.
 MaxWorkingSet	Получает или задает максимальный допустимый размер рабочего множества для связанного процесса.
 MinWorkingSet	Получает или задает минимальный допустимый размер рабочего множества для связанного процесса.
 Modules	Получает модули, которые были загружены связанным процессом.
 NonpagedSystemMemorySize	Устарело.Получает размер невыгружаемой системной памяти, выделенной этому процессу.
 NonpagedSystemMemorySize64	Получает объем невыгружаемой системной памяти, выделенной для связанного процесса.
 PagedMemorySize	Устарело.Получает размер выгружаемой памяти.
 PagedMemorySize64	Получает объем выгружаемой системной памяти, выделенной для связанного процесса.
 PagedSystemMemorySize	Устарело.Получает размер системной выгружаемой памяти.
 PagedSystemMemorySize64	Получает объем выгружаемой системной памяти, выделенной для связанного процесса.
 PeakPagedMemorySize	Устарело.Получает максимальный размер выгружаемой памяти.
 PeakPagedMemorySize64	Получает максимальный объем памяти в файле подкачки виртуальной памяти, используемой связанным процессом.
 PeakVirtualMemorySize	Устарело.Получает максимальный размер виртуальной памяти.
 PeakVirtualMemorySize64	Получает максимальный объем виртуальной памяти, используемой связанным процессом.
 PeakWorkingSet	Устарело.Получает максимальный размер рабочего множества для связанного процесса.
 PeakWorkingSet64	Получает максимальный объем физической памяти, используемой связанным процессом.
 PriorityBoostEnabled	Получает или задает значение, указывающее, должна ли операционная система временно увеличить приоритет связанного процесса, когда основное окно процесса получит фокус.
 PriorityClass	Получает или задает общую категорию приоритета для процесса.
 PrivateMemorySize	Устарело.Получает размер закрытой памяти.
 PrivateMemorySize64	Получает объем закрытой памяти, выделенной для связанного процесса.
 PrivilegedProcessorTime	Получает время, затраченное для выполнения процесса в привилегированном режиме.
 ProcessName	Получает имя процесса.
 ProcessorAffinity	Получает или задает процессоры, на которых может быть запланировано выполнение потоков данного процесса.
 Responding	Получает значение, указывающее, отвечает или нет пользовательский интерфейс.
 SafeHandle	Получает собственный дескриптор процесса.
 SessionId	Получает идентификатор сеанса служб терминалов для связанного процесса.
 Site	Получает или задает экземпляр ISite для компонента Component.(Наследуется от Component.)
 StandardError	Получает поток, используемый для чтения вывода ошибок приложения.
 StandardInput	Получает поток, используемый для записи ввода приложения.
 StandardOutput	Получает поток, используемый для чтения текстовых выходных данных приложения.
 StartInfo	Получает или задает свойства для передачи их методу Start объекта Process.
 StartTime	Получает время запуска связанного процесса.
 SynchronizingObject	Получает или задает объект, используемый для маршалинга вызовов обработчика событий, происходящих в результате события завершения процесса.
 Threads	Получает множество потоков, выполняющихся в связанном процессе.
 TotalProcessorTime	Получает полное время процессора для этого процесса.
 UserProcessorTime	Получает пользовательское время процессора для этого процесса.
 VirtualMemorySize	Устарело.Получает размер виртуальной памяти процесса.
 VirtualMemorySize64	Получает объем виртуальной памяти, выделенной для связанного процесса.
 WorkingSet	Устарело.Получает использование физической памяти связанного процесса.
 WorkingSet64	Получает объем физической памяти, выделенной для связанного процесса.

Методы
 BeginErrorReadLine()	Начинает операции асинхронного чтения с перенаправленного потока StandardError приложения.
 BeginOutputReadLine()	Начинает операции асинхронного чтения с перенаправленного потока StandardOutput приложения.
 CancelErrorRead()	Отменяет операцию асинхронного чтения в перенаправленном потоке StandardError приложения.
 CancelOutputRead()	Отменяет операцию асинхронного чтения в перенаправленном потоке StandardOutput приложения.
 Close()	Освобождает все ресурсы, связанные с этим компонентом.
 CloseMainWindow()	Закрывает процесс, имеющий пользовательский интерфейс, посылая сообщение о закрытии главному окну процесса.
 CreateObjRef(Type)	Создает объект, который содержит всю необходимую информацию для создания прокси-сервера, используемого для взаимодействия с удаленным объектом.(Наследуется от MarshalByRefObject.)
 Dispose()	Освобождает все ресурсы, используемые объектом Component.(Наследуется от Component.)
 Dispose(Boolean)	Этот API служит для поддержки инфраструктуры продукт и не предназначен для непосредственного использования из кода. Освобождает все ресурсы, используемые этим процессом.(Переопределяет Component.Dispose(Boolean).)
 EnterDebugMode()	Помещает компонент Process в состояние взаимодействия с работающим системным процессом, выполняющимся в специальном режиме путем включения встроенного свойства SeDebugPrivilege в данном потоке.
 Equals(Object)	Определяет, равен ли заданный объект текущему объекту.(Наследуется от Object.)
 Finalize()	Освобождает неуправляемые ресурсы и выполняет другие операции очистки, перед тем как объект Component будет удален при сборке мусора.(Наследуется от Component.)
 GetCurrentProcess()	Получает новый компонент Process и связывает его с активным в данный момент процессом.
 GetHashCode()	Играет роль хэш-функции для определённого типа.(Наследуется от Object.)
 GetLifetimeService()	Извлекает объект обслуживания во время существования, который управляет политикой времени существования данного экземпляра.(Наследуется от MarshalByRefObject.)
 GetProcessById(Int32)	Возвращает новый компонент Process, по заданному идентификатору процесса на локальном компьютере.
 GetProcessById(Int32, String)	Возвращает новый компонент Process по заданному идентификатору процесса и имени компьютера в сети.
 GetProcesses()	Создает новый компонент Process для каждого ресурса процесса на локальном компьютере.
 GetProcesses(String)	Создает новый компонент Process для каждого ресурса процесса на указанном компьютере.
 GetProcessesByName(String)	Создает массив из новых компонентов Process и связывает их со всеми ресурсами процесса на локальном компьютере, для которых заданное имя процесса является общедоступным.
 GetProcessesByName(String, String)	Создает массив из новых компонентов Process и связывает их со всеми ресурсами процесса на удаленном компьютере, для которых заданное имя процесса является общедоступным.
 GetService(Type)Возвращает объект, представляющий службу, обеспечиваемую компонентом Component или его контейнером Container.(Наследуется от Component.)
 GetType()	Возвращает объект класса Type для текущего экземпляра. (Наследуется от Object.)
 InitializeLifetimeService()	Возвращает объект обслуживания во время существования для управления политикой времени существования данного экземпляра.(Наследуется от MarshalByRefObject.)
 Kill()	Немедленно останавливает связанный процесс.
 LeaveDebugMode()	Выбирает компонент Process из состояния, позволяющего ему взаимодействовать с процессами операционной системы, запущенными в специальном режиме.
 MemberwiseClone()	Создает "поверхностную" копию текущего объекта. (Наследуется от Object.)
 MemberwiseClone(Boolean)	Создает неполную копию текущего объекта MarshalByRefObject.(Наследуется от MarshalByRefObject.)
 OnExited()	Вызывает событие Exited.
 Refresh()	Удаляет любые кэшированные внутри компонента процесса сведения о связанном процессе.
 Start()	Запускает (или повторно использует) ресурс процесса, определенный свойством StartInfo этого компонента Process, и связывает его с компонентом.
 Start(ProcessStartInfo)	Запускает ресурс процесса, определенный параметром, содержащим стартовую информацию процесса (например, имя файла запускаемого процесса), и связывает ресурс с новым компонентом Process.
 Start(String)	Запускает ресурс процесса путем указания имени документа или файла приложения и связывает ресурс с новым компонентом Process.
 Start(String, String)	Запускает ресурс процесса путем указания имени приложения и набора аргументов командной строки и связывает ресурс с новым компонентом Process.
 Start(String, String, SecureString, String)	Запускает ресурс процесса путем указания имени приложения, имени пользователя, пароля и домена и связывает ресурс с новым компонентом Process.
 Start(String, String, String, SecureString, String)	Запускает ресурс процесса путем указания имени приложения, набора аргументов командной строки, имени пользователя, пароля и домена и связывает ресурс с новым компонентом Process.
 ToString()	Преобразует имя процесса в строку, объединенную с родительским типом компонента, если это применимо.(Переопределяет Component.ToString().)
 WaitForExit()	Дает компоненту Process команду ожидать завершения связанного процесса в течение неограниченного времени.
 WaitForExit(Int32)	Дает компоненту Process команду ожидать завершения связанного процесса в течение указанного времени в миллисекундах.
 WaitForInputIdle()	Дает компоненту Process команду ожидать перехода связанного процесса в состояние простоя в течение неограниченного времени.Эта перегрузка применяется только к процессам с пользовательским интерфейсом и, следовательно, с циклом сообщений.
 WaitForInputIdle(Int32)	Дает компоненту Process команду ожидать входа связанного процесса в состояние простоя в течение указанного времени в миллисекундах.Эта перегрузка применяется только к процессам с пользовательским интерфейсом и, следовательно, с циклом сообщений.

События
 Disposed	Происходит при удалении компонента вызовом метода Dispose. (Наследуется от Component.)
 ErrorDataReceived	Происходит, когда приложение выполняет запись в свой перенаправленный поток StandardError.
 Exited	Происходит при завершении процесса.
 OutputDataReceived	Происходит, когда приложение записывает строку в свой перенаправленный поток StandardOutput.